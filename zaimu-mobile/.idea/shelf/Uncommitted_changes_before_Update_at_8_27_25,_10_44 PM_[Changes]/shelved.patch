Index: ../zaimu-backend/src/main/java/br/com/zaimu/backend/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.zaimu.backend.service;\n\nimport br.com.zaimu.backend.model.entity.User;\nimport br.com.zaimu.backend.model.security.LoginResponseView;\nimport br.com.zaimu.backend.model.security.RequestUser;\nimport br.com.zaimu.backend.model.to.LoginParameters;\nimport br.com.zaimu.backend.model.to.RegisterParameters;\n\npublic interface AuthService {\n    RequestUser signUpUser (RegisterParameters registerParameters);\n\n    LoginResponseView signInUser (LoginParameters registerParameters);\n\n    RequestUser confirmEmail (User user, String code);\n\n    String resetPassword (String credential, String code, String newPassword);\n\n    void resendSignUpCode (String nickname);\n\n//    int cleanupUnconfirmedUsers(int daysThreshold);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/AuthService.java b/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/AuthService.java
--- a/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/AuthService.java	(revision 09feead6f36643163b19e3503c32fda59aa8a8fe)
+++ b/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/AuthService.java	(date 1756250539659)
@@ -16,6 +16,4 @@
     String resetPassword (String credential, String code, String newPassword);
 
     void resendSignUpCode (String nickname);
-
-//    int cleanupUnconfirmedUsers(int daysThreshold);
 }
Index: ../zaimu-backend/src/main/java/br/com/zaimu/backend/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.zaimu.backend.controller;\n\nimport br.com.zaimu.backend.controller.enums.HttpStatusEnum;\nimport br.com.zaimu.backend.model.entity.User;\nimport br.com.zaimu.backend.model.exception.ValidationExceptionHandler;\nimport br.com.zaimu.backend.model.to.HttpResponse;\nimport br.com.zaimu.backend.model.to.RegisterParameters;\nimport br.com.zaimu.backend.model.to.LoginParameters;\nimport br.com.zaimu.backend.service.AuthService;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/auth\")\npublic class AuthController {\n\n    @Autowired\n    AuthService authService;\n\n    @PostMapping(\"/register\")\n    public HttpResponse register(\n            @Valid @RequestBody RegisterParameters registerParameters\n    ) {\n        Integer reponseStatus;\n        Object response;\n        try{\n            response = authService.signUpUser(registerParameters);\n            reponseStatus = HttpStatusEnum.success();\n        } catch (ValidationExceptionHandler e) {\n            response = e.getMessage();\n            reponseStatus = HttpStatusEnum.fail();\n        }\n        return new HttpResponse(reponseStatus, response);\n    }\n\n    @PostMapping(\"/login\")\n    public HttpResponse login(\n            @Valid @RequestBody LoginParameters loginParameters\n    ) {\n        Integer reponseStatus;\n        Object response;\n        try{\n            response = authService.signInUser(loginParameters);\n            reponseStatus = HttpStatusEnum.success();\n        } catch (ValidationExceptionHandler e) {\n            response = e.getMessage();\n            reponseStatus = HttpStatusEnum.fail();\n        }\n        return new HttpResponse(reponseStatus, response);\n    }\n\n    @PostMapping(\"/confirm-email/{code}\")\n    public HttpResponse confirmEmail(\n            @RequestBody User user,\n            @PathVariable String code\n    ) {\n        Integer reponseStatus;\n        Object response;\n        try{\n            response = authService.confirmEmail(user, code);\n            reponseStatus = HttpStatusEnum.success();\n        } catch (ValidationExceptionHandler e) {\n            response = e.getMessage();\n            reponseStatus = HttpStatusEnum.fail();\n        }\n        return new HttpResponse(reponseStatus, response);\n    }\n\n    @PostMapping(\"/reset-password/{credential}\")\n    public HttpResponse resetPassword(\n            @PathVariable String credential,\n            @RequestParam (required = false) String code,\n            @RequestParam (required = false) String newPassword\n    ) {\n        Integer reponseStatus;\n        Object response;\n        try{\n            response = authService.resetPassword(credential, code, newPassword);\n            reponseStatus = HttpStatusEnum.success();\n        } catch (IllegalArgumentException e) {\n            response = e.getMessage();\n            reponseStatus = HttpStatusEnum.fail();\n        }\n        return new HttpResponse(reponseStatus, response);\n    }\n\n    @PostMapping(\"/resend-code/{nickname}\")\n    public HttpResponse resendCode(\n            @PathVariable String nickname\n    ) {\n        Integer reponseStatus;\n        Object response;\n        try{\n            authService.resendSignUpCode(nickname);\n            response = \"CÃ³digo reenviado.\";\n            reponseStatus = HttpStatusEnum.success();\n        } catch (ValidationExceptionHandler e) {\n            response = e.getMessage();\n            reponseStatus = HttpStatusEnum.fail();\n        }\n        return new HttpResponse(reponseStatus, response);\n    }\n\n//    @GetMapping(\"/cleanup-unconfirmed-users\")\n//    public HttpResponse cleanupUnconfirmedUsers(\n////            @RequestParam (required = false, defaultValue = \"7\") Integer daysThreshold\n//    ) {\n//        Integer reponseStatus;\n//        Object response;\n//        try{\n//            int deletedUsers = authService.cleanupUnconfirmedUsers(0);\n//            response = String.format(\"Deleted %d unconfirmed users.\", deletedUsers);\n//            reponseStatus = HttpStatusEnum.success();\n//        } catch (ValidationExceptionHandler e) {\n//            response = e.getMessage();\n//            reponseStatus = HttpStatusEnum.fail();\n//        }\n//        return new HttpResponse(reponseStatus, response);\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../zaimu-backend/src/main/java/br/com/zaimu/backend/controller/AuthController.java b/../zaimu-backend/src/main/java/br/com/zaimu/backend/controller/AuthController.java
--- a/../zaimu-backend/src/main/java/br/com/zaimu/backend/controller/AuthController.java	(revision 09feead6f36643163b19e3503c32fda59aa8a8fe)
+++ b/../zaimu-backend/src/main/java/br/com/zaimu/backend/controller/AuthController.java	(date 1756250539645)
@@ -107,21 +107,4 @@
         }
         return new HttpResponse(reponseStatus, response);
     }
-
-//    @GetMapping("/cleanup-unconfirmed-users")
-//    public HttpResponse cleanupUnconfirmedUsers(
-////            @RequestParam (required = false, defaultValue = "7") Integer daysThreshold
-//    ) {
-//        Integer reponseStatus;
-//        Object response;
-//        try{
-//            int deletedUsers = authService.cleanupUnconfirmedUsers(0);
-//            response = String.format("Deleted %d unconfirmed users.", deletedUsers);
-//            reponseStatus = HttpStatusEnum.success();
-//        } catch (ValidationExceptionHandler e) {
-//            response = e.getMessage();
-//            reponseStatus = HttpStatusEnum.fail();
-//        }
-//        return new HttpResponse(reponseStatus, response);
-//    }
 }
Index: ../zaimu-backend/src/main/java/br/com/zaimu/backend/service/impl/AuthServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.zaimu.backend.service.impl;\n\nimport br.com.zaimu.backend.model.entity.User;\nimport br.com.zaimu.backend.model.security.LoginResponseView;\nimport br.com.zaimu.backend.model.security.RequestUser;\nimport br.com.zaimu.backend.model.to.LoginParameters;\nimport br.com.zaimu.backend.model.to.RegisterParameters;\nimport br.com.zaimu.backend.model.to.UserView;\nimport br.com.zaimu.backend.repository.hibernate.UserRepository;\nimport br.com.zaimu.backend.service.AuthService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.AttributeType;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.AuthFlowType;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ConfirmForgotPasswordRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ConfirmSignUpRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ConfirmSignUpResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.DeleteUserRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ForgotPasswordRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ForgotPasswordResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.InitiateAuthRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.InitiateAuthResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ListUsersRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ListUsersResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ResendConfirmationCodeRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.ResendConfirmationCodeResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.SignUpRequest;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.SignUpResponse;\nimport software.amazon.awssdk.services.cognitoidentityprovider.model.UsernameExistsException;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\npublic class AuthServiceImpl extends RequestUser implements AuthService {\n\n    private static final Logger logger = LoggerFactory.getLogger(AuthServiceImpl.class);\n\n    @Autowired\n    private UserRepository userRepository;\n\n    private final CognitoIdentityProviderClient cognitoClient;\n\n    @Value(\"${aws.cognito.client-id}\")\n    private String clientId;\n\n    @Value (\"${aws.cognito.user-pool-id}\")\n    private String userPoolId;\n\n    public AuthServiceImpl(@Value(\"${aws.region}\") String region) {\n        this.cognitoClient = CognitoIdentityProviderClient.builder()\n                .region(Region.of(region))\n                .credentialsProvider(DefaultCredentialsProvider.create())\n                .build();\n    }\n\n    public RequestUser signUpUser (RegisterParameters registerParameters) {\n        Map<String, String> userAttributes = new HashMap<>();\n        userAttributes.put(\"email\", registerParameters.getEmail());\n        userAttributes.put(\"given_name\", registerParameters.getGivenName());\n        userAttributes.put(\"family_name\", registerParameters.getFamilyName());\n        userAttributes.put(\"nickname\", registerParameters.getNickname());\n\n        List<AttributeType> attributes = userAttributes.entrySet().stream()\n                .map(entry -> AttributeType.builder()\n                        .name(entry.getKey())\n                        .value(entry.getValue())\n                        .build())\n                .collect(Collectors.toList());\n\n        SignUpRequest signUpRequest = SignUpRequest.builder()\n                .clientId(clientId)\n                .username(registerParameters.getNickname())\n                .password(registerParameters.getPassword())\n                .userAttributes(attributes)\n                .build();\n\n        try {\n            SignUpResponse response = cognitoClient.signUp(signUpRequest);\n            logger.info(\"User {} signed up successfully. User confirmed: {}\", registerParameters.getEmail(), response.userConfirmed());\n            return new RequestUser(\n                    null,\n                    UUID.fromString(response.userSub()),\n                    registerParameters.getEmail(),\n                    registerParameters.getGivenName(),\n                    registerParameters.getFamilyName(),\n                    registerParameters.getNickname()\n            );\n        } catch (UsernameExistsException uee) {\n            logger.error(\"Erro ao registrar usuÃ¡rio: {}\", uee.getMessage());\n            throw new RuntimeException(\"UsuÃ¡rio jÃ¡ cadastrado\", uee);\n        }\n    }\n\n    public LoginResponseView signInUser (LoginParameters loginParameters) {\n        loginParameters.isValid();\n        RequestUser requestUser = new RequestUser();\n\n        Map<String, String> authParameters = new HashMap<>();\n        String credentialType;\n        if (loginParameters.getEmail() == null || loginParameters.getEmail().isBlank()) {\n            authParameters.put(\"USERNAME\", loginParameters.getNickname());\n            credentialType = loginParameters.getNickname();\n        } else {\n            authParameters.put(\"USERNAME\", loginParameters.getEmail());\n            credentialType = loginParameters.getEmail();\n        }\n        authParameters.put(\"PASSWORD\", loginParameters.getPassword());\n\n\n        InitiateAuthRequest authRequest = InitiateAuthRequest.builder()\n                .clientId(clientId)\n                .authFlow(AuthFlowType.USER_PASSWORD_AUTH)\n                .authParameters(authParameters)\n                .build();\n\n        try {\n            InitiateAuthResponse response = cognitoClient.initiateAuth(authRequest);\n            logger.info(\"Login bem-sucedido para o usuÃ¡rio: {}\", credentialType);\n\n            UserView user = userRepository.getUserByNicknameOrEmail(credentialType);\n            requestUser.setUserId(user.getUserId());\n            requestUser.setUuid(user.getUuid());\n            requestUser.setEmail(user.getEmail());\n            requestUser.setGivenName(user.getGivenName());\n            requestUser.setFamilyName(user.getFamilyName());\n            requestUser.setNickname(user.getNickname());\n\n            return new LoginResponseView(\n                    response.authenticationResult().idToken(),\n                    response.authenticationResult().accessToken(),\n                    requestUser\n            );\n        } catch (Exception e) {\n            logger.error(\"Erro ao fazer login do usuÃ¡rio: {}\", e.getMessage());\n            throw new RuntimeException(\"Falha no login do usuÃ¡rio\", e);\n        }\n    }\n\n    public RequestUser confirmEmail (User user, String code) {\n        ConfirmSignUpRequest confirmSignUpRequest = ConfirmSignUpRequest.builder()\n                .clientId(clientId)\n                .username(user.getNickname())\n                .confirmationCode(code)\n                .build();\n\n        try {\n            cognitoClient.confirmSignUp(confirmSignUpRequest);\n            logger.info(\"User {} confirmed successfully.\", user.getNickname());\n\n            Long userId = userRepository.create(user);\n\n            return new RequestUser(\n                    userId,\n                    user.getUuid(),\n                    user.getEmail(),\n                    user.getGivenName(),\n                    user.getFamilyName(),\n                    user.getNickname()\n            );\n\n        } catch (Exception e) {\n            logger.error(\"Error confirming user: {}\", e.getMessage());\n            throw new RuntimeException(\"Failed to sign up user\", e);\n        }\n    }\n\n    public String resetPassword (String credential, String code, String newPassword) {\n        if ((code == null || code.isBlank()) && (newPassword == null || newPassword.isBlank())) {\n            ForgotPasswordRequest forgotPasswordRequest = ForgotPasswordRequest.builder()\n                    .clientId(clientId)\n                    .username(credential)\n                    .build();\n\n            try {\n                ForgotPasswordResponse response = cognitoClient.forgotPassword(forgotPasswordRequest);\n                logger.info(\"Verifique seu e-mail para redefinir sua senha.\");\n                return \"Verifique seu e-mail para redefinir sua senha.\";\n            } catch (Exception e) {\n                logger.error(\"Erro ao validar a credencial: {}. Erro: {}\",credential, e.getMessage());\n                throw new RuntimeException(\"Failed to sign up user\", e);\n            }\n        } else {\n            final String PASSWORD_REGEX = \"^(?!^ |.* $)(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[\\\\^\\\\$\\\\*\\\\.\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\?\\\\-!\\\"@#%&/\\\\\\\\,><' ;:|~`_+=]).{8,}$\";\n\n            if (!newPassword.matches(PASSWORD_REGEX)) {\n                throw new IllegalArgumentException(\n                        \"A senha deve conter pelo menos 8 caracteres, incluindo um nÃºmero, uma letra minÃºscula, uma letra maiÃºscula e um caractere especial. NÃ£o pode conter espaÃ§os no inÃ­cio ou no fim.\"\n                );\n            }\n\n            ConfirmForgotPasswordRequest confirmForgotPasswordRequest = ConfirmForgotPasswordRequest.builder()\n                    .clientId(clientId)\n                    .username(credential)\n                    .confirmationCode(code)\n                    .password(newPassword)\n                    .build();\n\n            try {\n                cognitoClient.confirmForgotPassword(confirmForgotPasswordRequest);\n                logger.info(\"Senha redefinida!\");\n                return \"Senha redefinida!\";\n            } catch (Exception e) {\n                logger.error(\"Erro ao resetar a senha: {}\", e.getMessage());\n                throw new RuntimeException(\"Failed to confirm password reset\", e);\n            }\n        }\n    }\n\n    public void resendSignUpCode (String nickname) {\n        ResendConfirmationCodeRequest resendConfirmationCodeRequest = ResendConfirmationCodeRequest.builder()\n                .clientId(clientId)\n                .username(nickname)\n                .build();\n\n        try {\n            ResendConfirmationCodeResponse response = cognitoClient.resendConfirmationCode(resendConfirmationCodeRequest);\n            logger.info(\"CÃ³digo reenviado. Verifique seu e-mail.\");\n        } catch (Exception e) {\n            logger.error(\"Erro ao reenviar o cÃ³digo: {}\", e.getMessage());\n            throw new RuntimeException(\"Failed to sign up user\", e);\n        }\n    }\n//\n//    public int cleanupUnconfirmedUsers(int daysThreshold) {\n//        try {\n//            ListUsersRequest request = ListUsersRequest.builder()\n//                    .userPoolId(userPoolId)\n//                    .filter(\"cognito:user_status = \\\"UNCONFIRMED\\\"\")\n//                    .build();\n//\n//            ListUsersResponse response = cognitoClient.listUsers(request);\n//            int deletedCount = 0;\n//            Instant thresholdDate = Instant.now().minus(daysThreshold, ChronoUnit.DAYS);\n//\n////            for (UserType user : response.users()) {\n////                if (shouldDeleteUser(user, thresholdDate)) {\n////                    deleteUser(user.username());\n////                    deletedCount++;\n////                    log.info(\"Deleted unconfirmed user: {}\", user.username());\n////                }\n////            }\n//\n//            logger.info(\"Deleted {} unconfirmed users\", response);\n//\n//\n//            return deletedCount;\n//\n//        } catch (Exception e) {\n//            logger.error(\"Error during cleanup\", e);\n//            throw new RuntimeException(\"Cleanup failed\", e);\n//        }\n//    }\n//\n////    private boolean shouldDeleteUser(UserType user, Instant thresholdDate) {\n////        Optional<AttributeType> createdDateAttr = user.attributes().stream()\n////                .filter(attr -> \"created_date\".equals(attr.name()))\n////                .findFirst();\n////\n////        if (createdDateAttr.isPresent()) {\n////            long createdTimestamp = Long.parseLong(createdDateAttr.get().value()) * 1000;\n////            Instant createdInstant = Instant.ofEpochMilli(createdTimestamp);\n////            return createdInstant.isBefore(thresholdDate);\n////        }\n////\n////        return false;\n////    }\n////\n////    private void deleteUser(String username) {\n////        AdminDeleteUserRequest deleteRequest = AdminDeleteUserRequest.builder()\n////                .userPoolId(userPoolId)\n////                .username(username)\n////                .build();\n////\n////        cognitoClient.adminDeleteUser(deleteRequest);\n////    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/impl/AuthServiceImpl.java b/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/impl/AuthServiceImpl.java
--- a/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/impl/AuthServiceImpl.java	(revision 09feead6f36643163b19e3503c32fda59aa8a8fe)
+++ b/../zaimu-backend/src/main/java/br/com/zaimu/backend/service/impl/AuthServiceImpl.java	(date 1756250539673)
@@ -17,6 +17,7 @@
 import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
 import software.amazon.awssdk.regions.Region;
 import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
+import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminDeleteUserRequest;
 import software.amazon.awssdk.services.cognitoidentityprovider.model.AttributeType;
 import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthFlowType;
 import software.amazon.awssdk.services.cognitoidentityprovider.model.ConfirmForgotPasswordRequest;
@@ -231,57 +232,4 @@
             throw new RuntimeException("Failed to sign up user", e);
         }
     }
-//
-//    public int cleanupUnconfirmedUsers(int daysThreshold) {
-//        try {
-//            ListUsersRequest request = ListUsersRequest.builder()
-//                    .userPoolId(userPoolId)
-//                    .filter("cognito:user_status = \"UNCONFIRMED\"")
-//                    .build();
-//
-//            ListUsersResponse response = cognitoClient.listUsers(request);
-//            int deletedCount = 0;
-//            Instant thresholdDate = Instant.now().minus(daysThreshold, ChronoUnit.DAYS);
-//
-////            for (UserType user : response.users()) {
-////                if (shouldDeleteUser(user, thresholdDate)) {
-////                    deleteUser(user.username());
-////                    deletedCount++;
-////                    log.info("Deleted unconfirmed user: {}", user.username());
-////                }
-////            }
-//
-//            logger.info("Deleted {} unconfirmed users", response);
-//
-//
-//            return deletedCount;
-//
-//        } catch (Exception e) {
-//            logger.error("Error during cleanup", e);
-//            throw new RuntimeException("Cleanup failed", e);
-//        }
-//    }
-//
-////    private boolean shouldDeleteUser(UserType user, Instant thresholdDate) {
-////        Optional<AttributeType> createdDateAttr = user.attributes().stream()
-////                .filter(attr -> "created_date".equals(attr.name()))
-////                .findFirst();
-////
-////        if (createdDateAttr.isPresent()) {
-////            long createdTimestamp = Long.parseLong(createdDateAttr.get().value()) * 1000;
-////            Instant createdInstant = Instant.ofEpochMilli(createdTimestamp);
-////            return createdInstant.isBefore(thresholdDate);
-////        }
-////
-////        return false;
-////    }
-////
-////    private void deleteUser(String username) {
-////        AdminDeleteUserRequest deleteRequest = AdminDeleteUserRequest.builder()
-////                .userPoolId(userPoolId)
-////                .username(username)
-////                .build();
-////
-////        cognitoClient.adminDeleteUser(deleteRequest);
-////    }
 }
